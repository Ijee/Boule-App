package Home;

import Main.*;
import javafx.collections.ObservableList;
import javafx.event.*;
import javafx.scene.control.*;
import javafx.scene.input.*;

/**
 * Die Vision-Klasse für das initialisieren des Turniers zuständig.
 * 
 * @author Thorsten Schulz, Alexander Röber
 *
 */
public class HomeVision extends Vision implements EventHandler<Event>
{
    private HomeVisionUI ui;

    public HomeVision(Master m)
    {
        super(m);
    }

    @Override
    /**
     * Initialisiert die HomeVisionUI.
     */
    public void init()
    {
        ui = new HomeVisionUI(master, this);

        pane = ui.getPane();
        isInit = true;
    }

    @Override
    /**
     * Der handler der HomeVisionUI.
     */
    public void handle(Event e)
    {
        if(e.getSource() instanceof TextField && e instanceof KeyEvent)
        {
            KeyEvent k = (KeyEvent) e;
            TextField t = (TextField) e.getSource();
            ObservableList<TeilnehmerAuflistungsEintrag> liste = ui.getEintragsListe();

            if(liste.size() > 0
                    && (liste.get(liste.size() - 1).getNameField() == t || liste.get(
                            liste.size() - 1).getVereinField() == t))
            {
                if(k.getEventType() == KeyEvent.KEY_TYPED
                        && k.getCharacter().matches("\\p{Alnum}")
                        && t.getText().length() == 0)
                {
                    ui.addNewListLine();
                    ui.updateTeilnehmer(t);
                }
            }
            else if(liste.size() > 1
                    && (liste.get(liste.size() - 2).getNameField() == t || liste.get(
                            liste.size() - 2).getVereinField() == t))
            {
                if(k.getCode() == KeyCode.BACK_SPACE && t.getText().isEmpty())
                {
                    ui.deleteLastListLine();
                    ui.updateTeilnehmer(t);
                }
            }
        }
        else if(e.getSource() instanceof Button)
        {
            Button b = (Button) e.getSource();
            if(b == ui.getLadenButton())
            {
                //TODO: Lade Funktionalität
            }
            else if(b == ui.getEditButon())
            {
                // TODO:MainApp sagen, dass bearbeitet werden soll
            }
            else if(b == ui.getFertigButton())
            {
                master.notifyFertig();
            }
            else
            // Löschenbutton
            {
                ui.deleteListLine(b);
                ui.updateTeilnehmer();
            }
        }
    }
    
    public ObservableList<TeilnehmerAuflistungsEintrag> getEintragsListe()
    {
        return ui.getEintragsListe();
    }
}
